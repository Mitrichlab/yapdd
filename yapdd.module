<?php
/**
* @file
* A description of what your module does.
*/

define("YAPDD_API" , 'https://pddimp.yandex.ru/api2/admin/');


class YaDomain {

  function YaDomain($domain){

  }


}

/**
 * Implements hook_permission().
 */
function yapdd_permission() {
  return array(
    'administer yandex pdd config' => array(
      'title' => t('Administer Yandex PDD config'),
      'description' => t('Administer Yandex PDD config: set PDD Token & domain'),
    ),
    'administer yapdds' => array(
      'title' => t('Administer white label entities'),
      'description' => t('Created and edit all white label entities.'),
    ),
    'administer yapdd types' => array(
      'title' => t('Administer white label entity types'),
      'description' => t('Create and delete white label entity types and their fields.'),
    ),
    'administer yapdd domains' => array(
      'title' => t('Administer domains'),
      'description' => t('Administer domains'),
    ),
    'view own yapdds' => array(
      'title' => t('View own white label entities'),
      'description' => t('View own white label entities.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function yapdd_menu() {
  // http://dev2.drupal7.lex/admin/config/services/rss-publishing

  $items['admin/config/services/yapdd'] = array(
    'title' => 'Yandex PDD',
    'description' => 'Yandex PDD',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yapdd_domain_config'),
    'access arguments' => array('administer yandex pdd config'),
    'file' => 'yapdd.admin.inc',
  );

  $items['admin/structure/yapdd/manage/%yapdd_domain/check'] = array(
    'title' => 'Check',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yapdd_domain_check_form', 4),
    'access arguments' => array('administer yapdd domains'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
    //'file' => 'taxonomy.admin.inc',
  );
/*
  $items['admin/structure/yapdd/manage/%/check'] = array(
    'title' => 'Check 1',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yapdd_domain_check_form', 4),
    'access arguments' => array('administer yapdd domains'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
    //'file' => 'taxonomy.admin.inc',
  );
*/
  return $items;

}


/**
 * Gets the string to use for the given key.
 */
function yapdd_get_string($key) {
  $static = &drupal_static(__FUNCTION__);

  if (!isset($static)) {
    $static = variable_get('yapdd_strings', array()) + array(
        'entity label' => t('Yandex PDD label email'),
        'entity plural label' => t('Yandex PDD label emails'),
        'entity description' => 'Yandex PDD label emails are yapdd, but they can be customized.',
        'type label' => t('Yandex PDD domains'),
        'type plural label' => t('Yandex PDD label domains'),
        'type description' => 'Domains Yandex PDD',
        'base path' => 'yapdd',
        'admin menu path' => 'admin/structure/yapdd',
        'admin menu description' => 'Manage yapdd label types, including fields.',
        'admin menu path content' => 'admin/content/yapdd',
      );
  }
  return isset($static[$key]) ? $static[$key] : '';
}

/**
 * Implements hook_entity_info().
 */
function yapdd_entity_info() {
  $return = array(
    'yapdd' => array(
      'label' => yapdd_get_string('entity label'),
      'plural label' => yapdd_get_string('entity plural label'),
      'description' => yapdd_get_string('entity description'),
      'entity class' => 'YapddEntity',
      'controller class' => 'YapddController',
      'base table' => 'yapdd_email',
      'revision table' => 'yapdd_revision',
      'fieldable' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Full page'),
          'custom settings' => FALSE,
        ),
      ),
      'entity keys' => array(
        'id' => 'id',
        'revision' => 'revision_id',
        'bundle' => 'type',
        'label' => 'label',
        'login' => 'login',
      ),
      'bundles' => array(),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'yapdd_access',
      'module' => 'yapdd',
      'metadata controller class' => 'YapddMetadataController',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => yapdd_get_string('base path'),
        'file' => 'yapdd.pages.inc',
        'controller class' => 'YapddUIController',
      ),
    ),
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('yapdd_domain', 'd')
    ->fields('d')
    ->execute()
    ->fetchAllAssoc('name');

  foreach ($types as $type_name => $info) {
    $return['yapdd']['bundles'][$type_name] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => yapdd_get_string('admin menu path') . '/manage/%yapdd_domain',
        'real path' => yapdd_get_string('admin menu path') . '/manage/' . $type_name,
        'bundle argument' => 4,
        'access arguments' => array('administer yapdd types'),
      ),
    );
  }

  // Support entity cache module.
  if (module_exists('entitycache')) {
    $return['yapdd']['field cache'] = FALSE;
    $return['yapdd']['entity cache'] = TRUE;
  }

  $return['yapdd_domain'] = array(
    'label' => yapdd_get_string('type label'),
    'plural label' => yapdd_get_string('type plural label'),
    'description' => yapdd_get_string('type description'),
    'entity class' => 'YapddDomain',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'yapdd_domain',
    'fieldable' => FALSE,
    'bundle of' => 'yapdd',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'name',
      'label' => 'label',
      'domain' => 'domain',
      'token' => 'token',
      'delegated' => 'delegated',
      'country' => 'country',
      'imap_enabled' => 'imap_enabled',
      'pop_enabled' => 'pop_enabled',
      'default_theme' => 'default_theme',
      'check_results' => 'check_results',
      'next_check' => 'check_results',
      'last_check' => 'check_results',
    ),
    'access callback' => 'yapdd_domain_access',
    'module' => 'yapdd',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => yapdd_get_string('admin menu path'),
      'file' => 'yapdd.admin.inc',
      'controller class' => 'YapddDomainUIController',
    ),
  );
  // Define how to get the bundle-name from a yapdd type object.
  $return['yapdd']['bundle keys']['bundle'] = 'name';

  return $return;
}

/**
 * Access callback for the entity API.
 */
function yapdd_access($op, $entity = NULL, $account = NULL) {
  if (user_access('administer yapdds', $account)) {
    return TRUE;
  }
  $account = isset($account) ? $account : $GLOBALS['user'];

  // @todo: Make owner a field?
  if (isset($entity) && user_access('view own yapdds', $account)) {
    if ($entity->uid == $account->uid) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback for the entity API.
 */
function yapdd_domain_access($op, $entity = NULL, $account = NULL) {
  return user_access('administer yapdd types', $account);
}

/**
 * yapdd type loader.
 *
 * @return yapddType
 */
function yapdd_domain_load($type_name) {
  return entity_load_single('yapdd_domain', $type_name);
}

/**
 * yapdd loader.
 *
 * @return yapdd
 */
function yapdd_load($id) {
  return entity_load_single('yapdd', $id);
}

/**
 * Implements hook_views_api().
 */
function yapdd_views_api() {
  return array("api" => "3.0");
}

/**
 * Implements hook_ctools_plugin_directory()
 */
function yapdd_ctools_plugin_directory($module, $plugin) {
  if (in_array($module, array('panelizer', 'ctools', 'page_manager'))) {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function yapdd_ctools_plugin_api($module, $api) {
  if (($module == 'page_manager' && $api == 'pages_default') || $module == 'panelizer') {
    return array(
      'version' => 1,
      'path' => drupal_get_path('module', 'panelizer') . '/includes',
    );
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function yapdd_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to add yapdds on the admin menu content page.
  if ($root_path == yapdd_get_string('admin menu path content')) {
    $item = menu_get_item(yapdd_get_string('base path') . '/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

function yapdd_domain_check_form($form, &$form_state, $yapdd_domain) {
  $form = array();
  dpm($yapdd_domain);


  if (!isset($form_state['domain'])) {
    $domain = is_object($yapdd_domain) ? $yapdd_domain : (object) $yapdd_domain;
    $defaults = array(
      'name' => '',
      'machine_name' => '',
      'description' => '',
      'hierarchy' => 0,
      'weight' => 0, // TODO поправить
    );
    foreach ($defaults as $key => $value) {
      if (!isset($domain->$key)) {
        $domain->$key = $value;
      }
    }
    $form_state['domain'] = $domain;
  }
  else {
    $domain = $form_state['domain'];
  }


  $form['domain_name'] = array('#type' => 'hidden', '#value' => $domain->name);
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['check_status'] = array(
    '#type' => 'submit',
    '#name' => 'check_status',
    '#value' => t('Check status'),
    '#submit' => array('yapdd_domain_check_form_submit_check'),
  );
  $form['actions']['emails_list'] = array(
    '#type' => 'submit',
    '#name' => 'emails_list',
    '#value' => t('Emails list'),
    '#submit' => array('yapdd_domain_check_form_submit'),
  );
  return $form;

}

function yapdd_domain_check_form_submit($form, &$form_state) {
  //dpm($form_state);

  $list = yapdd_domain_email_list($form_state['domain']);
  dpm($list);
}

function yapdd_domain_check_form_submit_check($form, &$form_state) {
  $domain = $form_state['domain'];
  $domain->domainDetails();
}


/***
 *
 * Yandex.PDD API functions
 */


function yapdd_domain_status() {
  $conf = variable_get('yapdd');
  // https://pddimp.yandex.ru/api2/admin/domain/registration_status
  $url = 'https://pddimp.yandex.ru/api2/admin/domain/registration_status?';

  $data_arr = array(
      'domain' => $conf['domain'],
  );
  $host = $url . drupal_http_build_query($data_arr);
  dpm($host);

  $result = drupal_http_request($host, array(
      'headers' => array(
          'PddToken' => $conf['token'],
          'Content-Type' => 'application/x-www-form-urlencoded',
      ),
      'method' => 'GET',
    //'data' => drupal_http_build_query($data_arr),
  ));
  $data = drupal_json_decode($result->data);
  dpm($data, 'status');

  if(isset($data['error']) || $data['success'] == 'error') {
    // housadd_set_error($data['error']);
  }
  return $data;
}


function yapdd_email_add($login, $pass = NULL) {
  // https://pddimp.yandex.ru/api2/admin/email/add
  $op = 'email/add';
  $method = 'POST';

  $conf = variable_get('yapdd', NULL);
  if(is_null($pass)) {
    $pass = user_password();
  }
  $data_arr = array(
      'domain' => $conf['domain'],
      'login' => $login,
      'password' => $pass,
  );

  $result = drupal_http_request(YAPDD_API . $op, array(
      'headers' => array(
          'PddToken' => $conf['token'],
          'Content-Type' => 'application/x-www-form-urlencoded',
      ),
      'method' => $method,
      'data' => drupal_http_build_query($data_arr),
  ));
  $data = drupal_json_decode($result->data);
  dpm($data, 'add mail');

  if(isset($data['success']) &&  $data['success'] == 'ok') {
    drupal_set_message('Почтовый ящик ' . $data['login'] . 'создан.  Пароль: ' .$pass );
  }
  if(isset($data['error']) || $data['success'] == 'error') {
    //housadd_set_error($data['error']);
  }
  return $data;
}

// GET /api2/admin/email/list

function yapdd_domain_email_list($domain) {
  //dpm($domain);
  $first = yapdd_domain_email_get_page($domain);

  if(isset($first)) {
    $total = $first['total'];

    $accounts = $first['accounts'];
    $load = count($accounts);

    $i = 2;
    while ($load < $total) {
      $package = yapdd_domain_email_get_page($domain, $i);
      //dpm($package);
      $i++;
      if($package) {
        $load = $load + count($package['accounts']);
        $accounts = array_merge($accounts, $package['accounts']);
        //dpm($accounts, 'after +');
      }
    }
    return $accounts;
  }
  return $first;
}

function yapdd_domain_email_get_page($domain, $page = 1) {
  $on_page = 30;
  $op = 'email/list?';

  $data_arr = array(
      'domain' => $domain->domain,
      'page' => $page,
      'on_page' => $on_page,
  );
  $host = YAPDD_API. $op . drupal_http_build_query($data_arr);
  //dpm($host);

  $result = drupal_http_request($host, array(
      'headers' => array(
          'PddToken' => $domain->token,
          'Content-Type' => 'application/x-www-form-urlencoded',
      ),
      'method' => 'GET',
    //'data' => drupal_http_build_query($data_arr),
  ));
  $data = drupal_json_decode($result->data);
 // dpm($data, 'status');

  if(isset($data['error']) || $data['success'] == 'error') {
    // housadd_set_error($data['error']);
    return FALSE;
  }
  return $data;
}

/*
 * See https://tech.yandex.ru/pdd/doc/reference/domain-details-docpage/
 */
function yapdd_api_domain_details($domain) {
 // $domain->domainDetails();

}